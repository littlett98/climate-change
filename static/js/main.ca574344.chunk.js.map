{"version":3,"sources":["components/chart/chart.jsx","App.js","reportWebVitals.js","index.js"],"names":["climateChart","props","state","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","data","ref","this","onClick","fetchData","bind","json","newData","forEach","entry","push","year","newDataset","slice","setState","render","fetch","country","then","response","ok","Error","status","displayHistory","catch","error","console","Component","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"uQA2EeA,G,yDArEX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,OAAQ,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,QACjEC,SAAU,CACN,CACAC,MAAO,mBACPC,MAAM,EACNC,YAAa,GACbC,gBAAiB,uBACjBC,YAAa,qBACbC,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAkB,qBAClBC,qBAAsB,OACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B,qBAC3BC,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,GAChBC,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,OAxBxB,E,kGAmCf,OACI,gCACI,cAAC,OAAD,CAAMC,IAAI,QAAQD,KAAME,KAAKvB,QAC7B,wBAAQwB,QAASD,KAAKE,UAAUC,KAAKH,MAArC,8B,qCAKGI,GACX,IAAM1B,EAAS,GACT2B,EAAU,GAChBD,EAAKE,SAAQ,SAAAC,GAAU7B,EAAO8B,KAAKD,EAAME,MAAOJ,EAAQG,KAAKD,EAAMT,SACnE,IAAMY,EAAaV,KAAKvB,MAAME,SAASgC,QACvCD,EAAW,GAAGZ,KAAOO,EACrBL,KAAKY,SAAS,CACVlC,OAAQA,EACRC,SAAU+B,IAEdV,KAAKa,W,kCAGI,IAAD,OACRC,MAAM,+EAAiFd,KAAKxB,MAAMuC,SACjGC,MAAK,SAAAC,GACF,IAAKA,EAASC,GACV,MAAM,IAAIC,MAAM,gBAAkBF,EAASG,QAE/C,OAAOH,EAASb,UAEnBY,MAAK,SAAAZ,GAAS,EAAKiB,eAAejB,MAClCkB,OAAM,SAAAC,GAAUC,QAAQD,MAAM,wBAA2BA,U,GAlEvCE,c,OCWZC,MAXf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,oCAEE,cAAC,EAAD,CAAOZ,QAAQ,cCERa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASvB,OACP,cAAC,IAAMwB,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,K","file":"static/js/main.ca574344.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nimport './chart.css';\r\n\r\nclass climateChart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n            datasets: [\r\n                {\r\n                label: 'My First dataset',\r\n                fill: false,\r\n                lineTension: 0.1,\r\n                backgroundColor: 'rgba(75,192,192,0.4)',\r\n                borderColor: 'rgba(75,192,192,1)',\r\n                borderCapStyle: 'butt',\r\n                borderDash: [],\r\n                borderDashOffset: 0.0,\r\n                borderJoinStyle: 'miter',\r\n                pointBorderColor: 'rgba(75,192,192,1)',\r\n                pointBackgroundColor: '#fff',\r\n                pointBorderWidth: 1,\r\n                pointHoverRadius: 5,\r\n                pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n                pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n                pointHoverBorderWidth: 2,\r\n                pointRadius: 1,\r\n                pointHitRadius: 10,\r\n                data: [65, 59, 80, 81, 56, 55, 40]\r\n                }\r\n            ]\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <Line ref=\"chart\" data={this.state} />\r\n                <button onClick={this.fetchData.bind(this)}>Update Data</button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    displayHistory(json) {\r\n        const labels = [];\r\n        const newData = [];\r\n        json.forEach(entry => {labels.push(entry.year); newData.push(entry.data)});\r\n        const newDataset = this.state.datasets.slice();\r\n        newDataset[0].data = newData;\r\n        this.setState({\r\n            labels: labels,\r\n            datasets: newDataset\r\n        });\r\n        this.render();\r\n    }\r\n\r\n    fetchData() {\r\n        fetch('http://climatedataapi.worldbank.org/climateweb/rest/v1/country/cru/tas/year/' + this.props.country)\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                throw new Error('Status code: ' + response.status)\r\n            }\r\n            return response.json();\r\n        })\r\n        .then(json => {this.displayHistory(json)})\r\n        .catch(error => {console.error('There was a problem: '  + error)});\r\n    }\r\n}\r\n\r\nexport default climateChart;","import React from \"react\"\nimport Chart from \"./components/chart/chart.jsx\"\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>\n        hi\n        <Chart country=\"CAN\" />\n      </h1>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}